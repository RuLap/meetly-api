version: "3.8"

services:
  migrations:
    build: .
    command: goose -dir ./migrations postgres "$POSTGRES_CONN_STRING" up
    environment:
      - POSTGRES_CONN_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  meetly_api:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: meetly_dev
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - POSTGRES_CONN_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@auth_postgres:5432/${POSTGRES_DB}?sslmode=disable
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - CONFIRMATION_QUEUE=${CONFIRMATION_QUEUE}
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
    networks:
      - meetly_network_dev
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: meetly_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "55432:5432"
    networks:
      - meetly_network_prod
    volumes:
      - meetly_pg_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  mail_service:
    build:
      context: .
      dockerfile: ./internal/app/mail/Dockerfile
    container_name: mail_service_prod
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - CONFIRMATION_QUEUE=${CONFIRMATION_QUEUE}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME}
      - SMTP_FROM_ADDRESS=${SMTP_FROM_ADDRESS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - meetly_network_prod
    restart: unless-stopped

  minio:
    image: minio/minio
    container_name: meetly_minio_prod
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - meetly_network_prod
    volumes:
      - minio_data_prod:/data

  loki:
    image: grafana/loki:2.10.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml
    volumes:
      - ./loki-data:/loki

  promtail:
    image: grafana/promtail:2.10.0
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      - loki

volumes:
  meetly_pg_data_prod:
  rabbitmq_data_prod:
  minio_data_prod:
  kong:

networks:
  meetly_network_prod:
    driver: bridge